openapi: 3.0.1
info:
  title: Dutch Exposure Notification API
  description: |
    This specification describes the interface between the Dutch exposure
    notification app and the backend service.
    
    TODO: Add signatures to manifest, riskcalculationparameters and appconfig
  contact:
    name: Ministerie van Volksgezondheid Welzijn en Sport backend repository
    url: https://github.com/minvws/nl-covid19-notification-app-backend
  license:
    name: European Union Public License v. 1.2
    url: https://github.com/minvws/nl-covid19-notification-app-backend/blob/master/LICENSE.txt
  version: 0.1.0
servers:
  - url: https://tbd.example.com/v1
tags:
  - name: CDN
    description: |
      Content retrieved via CDN. Note that the Swagger file doesn't let us specify a separate base url for the CDN content as the other calls. 
      TODO: Maybe split it into two Swagger files?"
  - name: Enrollment
    description: |
      Methods that deal with key/secret/id exchanges
  - name: Uploading keys
    description: |
      Methods that deal with the upload of TEK keys
  - name: Lab Confirmation
    description: |
      Methods that deal with the confirmation of a positive test by the lab/health authority
paths:
  /manifest:
    get:
      tags:
        - CDN
      summary: Get the manifest containing pointers/info about the other content on
        the CDN.
      description: |
        The manifest file should be periodically retrieved and provides the app with details about content that can be downloaded/updated. 
        
        The frequency of retrieving the manifest should be defined based on the value manifestFrequency in the AppConfig, with a certain randomness
        
        TODO: Define randomness formula for retrieving the manifest request.
      operationId: getManifest
      responses:
        200:
          description: Manifest retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
  /exposurekeyset/{id}:
    get:
      tags:
        - CDN
      summary: Get a batch of TEK keys
      description: |
        TEK keys are indexed by country (reserved for future use; international operatibility) and identified by a hash.  
        The manifest provides a list of all currently relevant batch files. Clients should only download batches that  
        they haven't already retrieved. Batches are immutable (TODO check with Key file spec by Google/Apple:  
        are they indeed supposed to be immutable?), so a file, once retrieved, should never be retrieved again.
      parameters:
        - name: id
          in: path
          description: id from manifest ExposureKeySets
          required: true
          schema:
            type: string
      responses:
        200:
          description: Key batchfile retrieved succesfully
          content:
            application/zip:
              schema:
                type: object
  /riskcalculationparameters/{id}:
    get:
      tags:
        - CDN
      summary: Get the configuration for the app
      description: |
        The configuration contains all configuration items relevant to the app.  
        This resource should be fetched if the app does not have this version in its cache.
      parameters:
        - name: id
          in: path
          description: The riskCalculationParameters value from the manifest 
          required: true
          schema:
            type: string
      responses:
        200:
          description: retrieved succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RiskCalculationParameters"
  /appconfig/{id}:
    get:
      tags:
        - CDN
      summary: Get the configuration for the app
      description: |
        The configuration contains all configuration items relevant to the app.  
        This resource should be fetched if the app does not have this version in its cache.
      parameters:
        - name: id
          in: path
          description: The appConfig value from the manifest
          required: true
          schema:
            type: string
      responses:
        200:
          description: Config retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfig'
  /caregiverPortal/labconfirm:
    post:
      tags:
        - Lab Confirmation
      summary: Confirm a positive test result based on a LabConfirmationId
      description: |
        This method confirms that a specific LabConfirmationId is associated with a positive COVID19 test result.
        
        The method is either called by: 
          * the lab/health authority's backend system 
          * the Infection Confirmation Code system in absence of a HA backend
        
        Can only be called once per unique valid LabConfirmationId.
      security:
        - caregiverportalJwtAuth: []
      requestBody:
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/LabConfirmationRequest'
            example:
              labConfirmationId: "2L245B"
              dateOfSymptomsOnset: "2020-07-10T00:00:00.000Z"
        required: true
      responses:
        200:
          description: Lab Confirmation Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabConfirmationResponse'
              examples:
                Success:
                  value:
                    valid: true
                Invalid labConfirmationId:
                  description: Lab Confirmation Id not found
                  value:
                    valid: false
        400:
          description: Lab Confirmation Id format validation failed
  /register:
    post:
      tags:
      - Enrollment
      summary: Exchange a secret with the server so we can sign our keys
      description: |
        This method is called by a device to exchange a secret, in the fallback flow (in case a secret wasn't yet 
        exchanged in the test facility). 
        The secret is stored in an anonymous bucket on the server where later the TEK keys will be dropped.
        The device sends a labConfirmationId in the request that will also be stored in the bucket.
        This labConfirmationId is generated on the device and read by the device owner to the operator who submits
        the key to the server out-of-band.
        The method returns a confirmationKey.
        See https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Solution%20Architecture.md#lab-result-validation-flow.
        
        This method implements observer protection. 
        See https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Traffic%20Analysis%20Mitigation%20With%20Decoys.md

      requestBody:
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/EnrollmentRequest'
        required: true
      responses:
        200:
          description: Registration processed correctly
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/EnrollmentResponse'
  /postkeys:
    post:
      tags:
      - Uploading Keys
      summary: Upload diagnosis keys (TEKs) to the server
      description: |
        This method is used by a device to upload one or more TEK keys to the server. 
        See https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Solution%20Architecture.md#lab-result-validation-flow.
        
        This method implements observer protection. 
        See https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Traffic%20Analysis%20Mitigation%20With%20Decoys.md

        Notes: the phone will never know whether a test result was positive, for privacy reasons. This means that a user might upload keys using this method by using the 'I've been tested positive' flow even though there isn't a positive test result. This is OK, since without the positive test result, the keys won't be processed. It also creates a decoy in itself: seeing keys being uploaded does not consitute a sign of infection. 
      parameters:
        - name: sig
          in: query
          description: The KeysRequest payload is signed with the confirmationKey using HMAC_SHA256. The resulting signature is placed in this parameter.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/KeysRequest'
        required: true
      responses:
        200:
          description: Keys processed correctly
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/KeysResponse'
  /stopkeys:
    post:
      tags:
      - Uploading Keys
      summary: Upload decoy keys to the server
      description: |
        This method is used by a device to upload one or more decoy keys, to create decoys for real uploads. 
        The keys in the request should be fake random numbers of the same size as regular keys. 
        
        The frequency of sending decoys should be derived from the AppConfig value decoyProbability.
        
        This method implements observer protection. 
        
        NOTE: The name is a clear reference to postkeys, but these keys are stopped. 
      parameters:
        - name: sig
          in: query
          description: The KeysRequest payload is signed with the confirmationKey using HMAC_SHA256. The resulting signature is placed in this parameter.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/KeysRequest'
        required: true
      responses:
        200:
          description: Decoy keys processed correctly
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/KeysResponse'
components:
  securitySchemes:
    caregiverportalJwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Manifest:
      type: object
      properties:
        exposureKeySets:
          type: array
          items:
            type: string
            example: ""
        riskCalculationParameters:
          type: string
          description: risk calculation parameters to fetch from endpoint /riskcalculationparameters/{id}.
          example: bbe32fcb
        appConfig:
          type: string
          description: Mobile app config to fetch from endpoint /appconfig/{id}. 
          example: aae34fcb
    RiskCalculationParameters:
      type: object
      properties:
        release:
          type: string
          format: date-time
        minimumRiskScore:
          type: integer
          format: int32
        attenuationScores:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        daysSinceLastExposureScores:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        durationScores:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        transmissionRiskScores:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        durationAtAttenuationThresholds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    AppConfig:
      type: object
      properties:
        androidMinimumVersion:
          type: integer
          description: |
            The minimum supported version of the Android app. The app has a build version number that is increased by 1  on each app release. Whenever the app downloads the manifest, it must compare its own version number with that of the manifest. If the version number is less than the manifest value, the user will be asked to upgrade the app from the app store.  See https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Solution%20Architecture.md#lifecycle-management.  
          format: int64
          example: 123
        iOSMinimumVersion:
          type: string
          description: |
             the minimum supported version of the iOS app. The app has a build version number (major.minor.patch) that is increased on each app release. Whenever the app downloads the manifest, it must compare its own version number with that of the manifest. If the version number is less than the manifest value, the user will be asked to upgrade the app from the app store.  See https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Solution%20Architecture.md#lifecycle-management.  
          example: 1.2.0
        iOSMinimumVersionMessage: 
          type: string
          description: If set, the app should not tell the user to upgrade, but dispplay this message to the user instead. It will help us migrate from testflight to the app store version.
          example: "The test is over, please download a new version from the app store."
        iOSAppStoreURL:
          type: string
          description: If set, the upgrade dialog can link to the app store url using this link.
          example: "https://appsto.re/...."
        manifestFrequency:
          type: integer
          description: This defines the frequency of retrieving the manifest, in minutes. 
          example: 360
        decoyProbability:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: |
            This defines the probability of sending decoys during a 24-hour period. This is configurable so we can tune the probability to server load if necessary. 
            The default value is 0.00118; see https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Traffic%20Analysis%20Mitigation%20With%20Decoys.md.
            A value of 0.0 implies that no decoy traffic will be scheduled.
        requestMinimumSize:
          type: integer
          minimum: 100
          maximum: 100000
          description: |
            The minimum number of characters that the total /register, /postkeys and /stopkeys request messages should be, by filling the request´s
            'padding' field with random charachters.
        requestMaximumSize:
          type: integer
          minimum: 100
          maximum: 100000
          description: |
            The maximum number of characters that the total /register, /postkeys and /stopkeys request messages should be, by filling the request´s
            'padding' field with random charachters.
        repeatedUploadDelay:
          type: integer
          minimum: 0
          maximum: 80000
          description: |
            The number of seconds delay to schedule a second TEK upload during the `EnrollmentResponse.validity` period.
            For an explanation, see https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/Traffic%20Analysis%20Mitigation%20With%20Decoys.md.
        coronoMelderDeactivated:
          type: string
          nullable: true
          description: |
            only if value == "deactivated", the app stops working as described in 
            https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/architecture/App%20Termination%20Plan.md
        
    Bundle:
      type: object
      properties:
        version:
          type: string
    LabConfirmationRequest:
      type: object
      properties:
        labConfirmationId:
          type: string
          example: "2L245B"
          description: The labConfirmationId identifies the result in the app ecosystem. For patients who are enrolled via the test facility (QR Scan), the labConfirmationId is known to the Lab/HA system. For patients who are enrolled directly during a result confirmation call (fallback flow), the labConfirmationId is handed out via the out of band phone conversation and entered by the operator. 
        dateOfSymptomsOnset:
          type: string
          format: date
          example: "2020-07-10T00:00:00.000Z"
          description: The day that the patient's symptoms started. This is usually < 14 days ago. However, we impose no constraint on it.
    LabConfirmationResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: The valid property indicates if the labConfirmationId is valid and linked to a valid bucket.
    EnrollmentRequest:
      type: object
      additionalProperties: false
      required:
      - "padding"
      properties:
        padding:
          type: string
          minLength: 0
          maxLength: 110000
          pattern: ^[a-zA-Z0-9+/]{0,110000}={0,2}$
          description: |
              The client should add padding for observer protection, so that the length of a request does not reveal that this is an enrollment. 
              The size of the padding should be randomized from a negative exponential distribution so that the total request message size is between `Appconfig.requestMinimumSize` and
              `Appconfig.requestMaximumSize`.
    EnrollmentResponse:
      type: object
      required:
      - bucketId
      - confirmationKey
      - labConfirmationId
      - padding
      properties:
        bucketId: 
          type: string
          description: Random generated number that will later in the upload process associate the keys with the correct signature
        confirmationKey:
          type: string
          description: |
            Base64 representation of a 256-bit key that will be used to sign TEKs upon upload. 
        labConfirmationId:
          type: string
          description: |
            Confirmation code that the phone should display so the phone owner can read it to an operator. The value may include dashes to denote separators, e.g. AB8-B7F should be rendered as two sets of characters.
        validity:
          type: integer
          format: int64
          description: The returned key is valid for this number of seconds after it was retrieved. The device should re-register if this time is elapsed. Typically the validUntil will be the number of seconds until 4am the next day so it's valid long enough to be able to upload the 14th key at a random time past midnight.
        padding:
          type: string
          minLength: 0
          maxLength: 10000
          pattern: ^[a-zA-Z0-9+/]{0,10000}={0,2}$
          description: |
              The server should add padding for observer protection, so that the length of a response does not reveal that this is a /register response. 
              The size of the padding should be randomized from a negative exponential distribution so that the total request message size is between system parameters `responseMinimumSize` and
              `responseMaximumSize`.
    KeysRequest:
      type: object
      additionalProperties: false
      required:
      - "keys"
      - "bucketId"
      - "padding"
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/TEK'
          description: Base64 representation of a 128-bit key that will be used to sign TEKs upon upload. The device should generate this key using a secure random number generator.
        bucketId:
          type: string
          description: identification of 'bucket' that contains the confirmationKey. See 'signature' field below.  
          format: "byte"
          minLength: 22
          maxLength: 44
          pattern: ^[a-zA-Z0-9+/]{22,43}={1,2}$
        padding:
          type: string
          minLength: 0
          maxLength: 110000
          pattern: ^[a-zA-Z0-9+/]{0,110000}={0,2}$
          description: |
              The request should add padding for observer protection, so that the length of a request does not reveal that this is a /postkeys call. 
              The size of the padding should be randomized from a negative exponential distribution so that the total request message size is between 
              `Appconfig.requestMinimumSize` and `Appconfig.requestMaximumSize`.
    KeysResponse:
      type: object
      additionalProperties: false
      required:
      - "padding"
      properties:
        padding:
          type: string
          minLength: 0
          maxLength: 10000
          pattern: ^[a-zA-Z0-9+/]{0,10000}={0,2}$
          description: |
              The server should add padding for observer protection, so that the length of a response does not reveal that this is a /postkeys response. 
              The size of the padding should be randomized from a negative exponential distribution so that the total request message size is between system parameters `responseMinimumSize` and
              `responseMaximumSize`.
    TEK:
      type: "object"
      required:
      - "keyData"
      - "rollingStartNumber"
      - "rollingPeriod"
      additionalProperties: false
      properties:
        keyData:
          type: "string"
          format: "byte"
          minLength: 22
          maxLength: 44
          pattern: ^[a-zA-Z0-9+/]{22,43}={1,2}$
          example: "dGlmaWNhdGllLWFwcCBvbiBjb2RlZm9ybmwgc2xhY2s="
        rollingStartNumber:
          type: integer
          minimum: 0
          example: 2648160
        rollingPeriod:
          type: integer
          minimum: 0
          example: 144
        regionsOfInterest:
          type: array
          items: 
            type: string
          description: "Reserved for future use. A traveler may want to indicate that the key from this day is relevant in certain countries. TODO: enhance/change based on interoperability requirements"
